{
  
    
        "post0": {
            "title": "Covid-19 Portugal",
            "content": "Info . Data source: . https://github.com/dssg-pt/covid19pt-data | . Configuration variables . DATA_FILE_URL = &#39;https://raw.githubusercontent.com/dssg-pt/covid19pt-data/master/data.csv&#39; DATA_FILE_URL_CONCELHOS = &#39;https://raw.githubusercontent.com/dssg-pt/covid19pt-data/master/data_concelhos.csv&#39; DATA_FILE_URL_AMOSTRAS = &#39;https://raw.githubusercontent.com/dssg-pt/covid19pt-data/master/amostras.csv&#39; . Imports . import pandas as pd import numpy as np import matplotlib.pyplot as plt import seaborn as sns from IPython.core.pylabtools import figsize . Load data . from requests import get def download(url, file_name): &quot;&quot;&quot;Download data from URL&quot;&quot;&quot; with open(file_name, &quot;wb&quot;) as file: response = get(url) file.write(response.content) # Target file names DATA_FILEPATH = &#39;data.csv&#39; DATA_FILEPATH_CONCELHOS = &#39;data_concelhos.csv&#39; DATA_FILEPATH_AMOSTRAS = &#39;amostras.csv&#39; # Download global, municipalities and samples data download(DATA_FILE_URL, DATA_FILEPATH) download(DATA_FILE_URL_CONCELHOS, DATA_FILEPATH_CONCELHOS) download(DATA_FILE_URL_AMOSTRAS, DATA_FILEPATH_AMOSTRAS) . # Load CSVs into dataframes and fill NaN with 0 df = pd.read_csv(DATA_FILEPATH, parse_dates=[0], index_col=[0], infer_datetime_format=True) df.fillna(value=0, inplace=True) df_concelhos = pd.read_csv(DATA_FILEPATH_CONCELHOS, parse_dates=[0], index_col=[0], infer_datetime_format=True) df_concelhos.fillna(value=0, inplace=True) df_amostras = pd.read_csv(DATA_FILEPATH_AMOSTRAS, parse_dates=[0], index_col=[0], infer_datetime_format=True) df_amostras.fillna(value=0, inplace=True) . Overview . # Calculate active cases df[&#39;casos_ativos&#39;] = df[&#39;confirmados&#39;] - df[&#39;recuperados&#39;] - df[&#39;obitos&#39;] figsize(16, 8) fig, ax = plt.subplots() ax.plot(df.index, df[[&#39;confirmados&#39;, &#39;recuperados&#39;, &#39;obitos&#39;, &#39;casos_ativos&#39;]], linestyle=&#39;--&#39;, marker=&#39;o&#39;) ax.set_ylim(bottom=0) plt.grid(axis=&#39;y&#39;) plt.title(&#39;Casos confirmados, recuperados e óbitos em Portugal&#39;) plt.legend([&#39;confirmados&#39;, &#39;recuperados&#39;, &#39;obitos&#39;, &#39;casos_ativos&#39;], loc=&#39;upper left&#39;); . Overview concelhos . figsize(16, 8) fig, ax = plt.subplots() ax.plot(df_concelhos.index, df_concelhos[[&#39;PORTO&#39;, &#39;AVEIRO&#39;, &#39;GONDOMAR&#39;, &#39;MATOSINHOS&#39;, &#39;LISBOA&#39;]], linestyle=&#39;--&#39;, marker=&#39;o&#39;) ax.set_ylim(bottom=0) plt.grid(axis=&#39;y&#39;) plt.title(&#39;Casos confirmados em concelhos selecionados&#39;) plt.legend([&#39;Porto&#39;, &#39;Aveiro&#39;, &#39;Gondomar&#39;, &#39;Matosinhos&#39;, &#39;Lisboa&#39;], loc=&#39;upper left&#39;); . # Population data POP_CONCELHOS = { &#39;PORTO&#39;: 215284, &#39;AVEIRO&#39;: 77916, &#39;GONDOMAR&#39;: 165631, &#39;MATOSINHOS&#39;: 174382, &#39;LISBOA&#39;: 507220 } . df_c = df_concelhos[[&#39;PORTO&#39;, &#39;AVEIRO&#39;, &#39;GONDOMAR&#39;, &#39;MATOSINHOS&#39;, &#39;LISBOA&#39;]] for col in df_c.columns: df_c[col+&#39;_p1000&#39;] = df_c[col]/POP_CONCELHOS[col]*1000 figsize(16, 8) fig, ax = plt.subplots() ax.plot(df_c.index, df_c[[&#39;PORTO_p1000&#39;, &#39;AVEIRO_p1000&#39;, &#39;GONDOMAR_p1000&#39;, &#39;MATOSINHOS_p1000&#39;, &#39;LISBOA_p1000&#39;]], linestyle=&#39;--&#39;, marker=&#39;o&#39;) ax.set_ylim(bottom=0) plt.grid(axis=&#39;y&#39;) plt.title(&#39;Casos confirmados por 1000 habitantes em concelhos selecionados&#39;) plt.legend([&#39;Porto&#39;, &#39;Aveiro&#39;, &#39;Gondomar&#39;, &#39;Matosinhos&#39;, &#39;Lisboa&#39;], loc=&#39;upper left&#39;); . C: Users USER Anaconda3 lib site-packages ipykernel_launcher.py:4: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame. Try using .loc[row_indexer,col_indexer] = value instead See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy after removing the cwd from sys.path. . Daily change . # Calculate daily change for new deaths (new cases already available) df[&#39;obitos_novos&#39;] = df.obitos.diff() figsize(16, 8) fig, ax1 = plt.subplots() ax1.plot(df.index, df[&#39;confirmados_novos&#39;], linestyle=&#39;--&#39;, marker=&#39;o&#39;) ax2 = ax1.twinx() ax2._get_lines.prop_cycler = ax1._get_lines.prop_cycler # get color order from previous axis ax2.plot(df.index, df[&#39;obitos_novos&#39;], linestyle=&#39;--&#39;, marker=&#39;o&#39;) ax1.legend([&#39;confirmados_novos&#39;], loc=&#39;upper left&#39;) ax2.legend([&#39;obitos_novos&#39;], loc=&#39;upper right&#39;); ax1.set_ylim(bottom=0); ax2.set_ylim(bottom=0); plt.title(&#39;Novos casos confirmados/mortes (variações relativamente ao dia anterior)&#39;); . Rolling average . # Calculate rolling averages df[&#39;confirmados_novos_rolling&#39;] = df[&#39;confirmados_novos&#39;].rolling(5).mean() df[&#39;obitos_novos_rolling&#39;] = df[&#39;obitos_novos&#39;].rolling(5).mean() figsize(16, 8) fig, ax1 = plt.subplots() ax1.plot(df.index, df[&#39;confirmados_novos_rolling&#39;], linestyle=&#39;--&#39;, marker=&#39;o&#39;) ax2 = ax1.twinx() ax2._get_lines.prop_cycler = ax1._get_lines.prop_cycler # get color order from previous axis ax2.plot(df.index, df[&#39;obitos_novos_rolling&#39;], linestyle=&#39;--&#39;, marker=&#39;o&#39;) ax1.legend([&#39;confirmados_novos&#39;], loc=&#39;upper left&#39;) ax2.legend([&#39;obitos_novos&#39;], loc=&#39;upper right&#39;); ax1.set_ylim(bottom=0); ax2.set_ylim(bottom=0); plt.title(&#39;Novos casos confirmados/mortes (média móvel a 5 dias)&#39;); . Testing . df[&#39;amostras&#39;] = df_amostras[&#39;amostras&#39;] df[&#39;amostras_novas&#39;] = df_amostras[&#39;amostras_novas&#39;] df[&#39;amostras_percent&#39;] = df[&#39;confirmados&#39;]/df[&#39;amostras&#39;]*100 figsize(16, 8) fig, ax1 = plt.subplots() ax1.plot(df.index, df[[&#39;confirmados&#39;, &#39;amostras&#39;]], linestyle=&#39;--&#39;, marker=&#39;o&#39;) ax2 = ax1.twinx() ax2._get_lines.prop_cycler = ax1._get_lines.prop_cycler # get color order from previous axis ax2.plot(df.index, df[&#39;amostras_percent&#39;], linestyle=&#39;--&#39;, marker=&#39;o&#39;) ax1.legend([&#39;confirmados&#39;, &#39;amostras&#39;], loc=&#39;upper left&#39;) ax2.legend([&#39;confirmados_percent&#39;], loc=&#39;upper right&#39;); ax1.set_ylim(bottom=0); ax2.set_ylim(bottom=0); ax1.set_ylabel(&#39;Número de confirmados ou número de testes&#39;) ax2.set_ylabel(&#39;Testes positivos (%)&#39;) plt.title(&#39;Número de testes e percentagem de testes positivos.&#39;); . figsize(16, 8) fig, ax1 = plt.subplots() ax1.plot(df.index, df[[&#39;confirmados_novos&#39;, &#39;amostras_novas&#39;]].rolling(7).mean(), linestyle=&#39;--&#39;, marker=&#39;o&#39;) ax1.legend([&#39;confirmados&#39;, &#39;amostras&#39;], loc=&#39;upper left&#39;) ax1.set_ylim(bottom=0); ax1.set_ylabel(&#39;Número de confirmados ou número de testes&#39;) plt.grid(axis=&#39;y&#39;) plt.title(&#39;Número de testes e casos confirmados (média móvel a 7 dias).&#39;); . Age and gender distribution . # List of labels of interest confirmados_m = [&#39;confirmados_0_9_m&#39;, &#39;confirmados_10_19_m&#39;, &#39;confirmados_20_29_m&#39;, &#39;confirmados_30_39_m&#39;, &#39;confirmados_40_49_m&#39;, &#39;confirmados_50_59_m&#39;, &#39;confirmados_60_69_m&#39;, &#39;confirmados_70_79_m&#39;, &#39;confirmados_80_plus_m&#39;] confirmados_f = [&#39;confirmados_0_9_f&#39;, &#39;confirmados_10_19_f&#39;, &#39;confirmados_20_29_f&#39;, &#39;confirmados_30_39_f&#39;, &#39;confirmados_40_49_f&#39;, &#39;confirmados_50_59_f&#39;, &#39;confirmados_60_69_f&#39;, &#39;confirmados_70_79_f&#39;, &#39;confirmados_80_plus_f&#39;] obitos_m = [&#39;obitos_0_9_m&#39;, &#39;obitos_10_19_m&#39;, &#39;obitos_20_29_m&#39;, &#39;obitos_30_39_m&#39;, &#39;obitos_40_49_m&#39;, &#39;obitos_50_59_m&#39;, &#39;obitos_60_69_m&#39;, &#39;obitos_70_79_m&#39;, &#39;obitos_80_plus_m&#39;] obitos_f = [&#39;obitos_0_9_f&#39;, &#39;obitos_10_19_f&#39;, &#39;obitos_20_29_f&#39;, &#39;obitos_30_39_f&#39;, &#39;obitos_40_49_f&#39;, &#39;obitos_50_59_f&#39;, &#39;obitos_60_69_f&#39;, &#39;obitos_70_79_f&#39;, &#39;obitos_80_plus_f&#39;] # Create final labels for plots age_labels = [label.replace(&#39;confirmados_&#39;, &#39;&#39;).replace(&#39;_m&#39;, &#39;&#39;) for label in confirmados_m] # X ticks and bar widths x = np.arange(len(confirmados_m)) bar_width = 0.4 figsize(18, 16) fig, (ax1, ax2) = plt.subplots(2, 1) ax1.bar(x - bar_width/2, df.iloc[-1][confirmados_m], bar_width, label=&#39;Men&#39;) ax1.bar(x + bar_width/2, df.iloc[-1][confirmados_f], bar_width, label=&#39;Women&#39;) ax1.set_ylabel(&#39;Casos confirmados&#39;) ax1.set_title(f&#39;Casos confirmados por faixa etária e género ({df.iloc[-1][&quot;data_dados&quot;]})&#39;) ax1.set_xticks(x) ax1.set_xticklabels(age_labels) ax1.legend(loc=&#39;upper left&#39;) ax2.bar(x - bar_width/2, df.iloc[-1][obitos_m], bar_width, label=&#39;Masculino&#39;) ax2.bar(x + bar_width/2, df.iloc[-1][obitos_f], bar_width, label=&#39;Feminino&#39;) ax2.set_ylabel(&#39;Óbitos&#39;) ax2.set_title(f&#39;Óbitos por faixa etária e género ({df.iloc[-1][&quot;data_dados&quot;]})&#39;) ax2.set_xticks(x) ax2.set_xticklabels(age_labels) ax2.legend(loc=&#39;upper left&#39;); . # Calculate morality rate (obitos / casos confirmados * 100) mortality_m = [] for confirmados, obitos, age in zip(confirmados_m, obitos_m, age_labels): mortality_m.append(&#39;mortality_percent_&#39; + age + &#39;_m&#39;) df[&#39;mortality_percent_&#39; + age + &#39;_m&#39;] = df[obitos] / df[confirmados] * 100 mortality_f = [] for confirmados, obitos, age in zip(confirmados_f, obitos_f, age_labels): mortality_f.append(&#39;mortality_percent_&#39; + age + &#39;_f&#39;) df[&#39;mortality_percent_&#39; + age + &#39;_f&#39;] = df[obitos] / df[confirmados] * 100 figsize(18, 8) fig, ax = plt.subplots() rects1 = ax.bar(x - bar_width/2, df.iloc[-1][mortality_m], bar_width, label=&#39;Masculino&#39;) rects2 = ax.bar(x + bar_width/2, df.iloc[-1][mortality_f], bar_width, label=&#39;Feminino&#39;) ax.set_ylabel(&#39;Mortalidade (%)&#39;) ax.set_title(f&#39;Mortalidade (obitos / casos confirmados * 100) por faixa etária e género ({df.iloc[-1][&quot;data_dados&quot;]})&#39;) ax.set_xticks(x) ax.set_xticklabels(age_labels) ax.legend(loc=&#39;upper left&#39;); def autolabel(rects): &quot;&quot;&quot;Attach a text label above each bar in *rects*, displaying its height.&quot;&quot;&quot; for rect in rects: height = rect.get_height() ax.annotate(&#39;{:.1f} %&#39;.format(height), xy=(rect.get_x() + rect.get_width() / 2, height), xytext=(0, 3), # 3 points vertical offset textcoords=&quot;offset points&quot;, ha=&#39;center&#39;, va=&#39;bottom&#39;) autolabel(rects1) autolabel(rects2) . Monitoring . lab: Número de casos suspeitos a aguardar resultados laboratoriais | suspeitos: Total de casos suspeitos (tendo a definição sido actualizada a 29/02/2020) desde 01/01/2020 | vigilancia: Número de casos sob vigilância pelas autoridades de saúde | n_confirmados: Número de casos cuja suspeita de infecção não se confirmou | internados: Número de pacientes COVID-19 internados | internados_uci: Número de pacientes COVID-19 internados em Unidades de Cuidados Intensivos | . monitoring = [&#39;lab&#39;, &#39;suspeitos&#39;, &#39;vigilancia&#39;, &#39;n_confirmados&#39;, &#39;internados&#39;, &#39;internados_uci&#39;] figsize(16, 8) fig, ax1 = plt.subplots() ax1.plot(df.index, df[monitoring[0:3]], linestyle=&#39;--&#39;, marker=&#39;o&#39;) ax2 = ax1.twinx() ax2._get_lines.prop_cycler = ax1._get_lines.prop_cycler # get color order from previous axis ax2.plot(df.index, df[monitoring[4:6]], linestyle=&#39;--&#39;, marker=&#39;o&#39;) ax1.legend(monitoring[0:3], loc=&#39;upper left&#39;) ax2.legend(monitoring[4:6], loc=&#39;center right&#39;); ax1.set_ylim(bottom=0); ax2.set_ylim(bottom=0); plt.title(&#39;Monitorização de possíveis infetados&#39;); . Symptoms . figsize(6, 6) symptoms = [&#39;sintomas_tosse&#39;, &#39;sintomas_febre&#39;, &#39;sintomas_dificuldade_respiratoria&#39;, &#39;sintomas_cefaleia&#39;, &#39;sintomas_dores_musculares&#39;, &#39;sintomas_fraqueza_generalizada&#39;] fig, ax = plt.subplots() ax.pie(df.iloc[-1][symptoms], labels=symptoms, autopct=&#39;%1.1f%%&#39;) ax.axis(&#39;equal&#39;) plt.title(f&#39;Distribuição de sintomas a {df.iloc[-1][&quot;data_dados&quot;]}&#39;); .",
            "url": "https://janiceto.github.io/data-viz-fastpages/python/jupyter/2020/06/18/covid-portugal.html",
            "relUrl": "/python/jupyter/2020/06/18/covid-portugal.html",
            "date": " • Jun 18, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This is where you put the contents of your About page. Like all your pages, it’s in Markdown format. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://janiceto.github.io/data-viz-fastpages/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://janiceto.github.io/data-viz-fastpages/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}